<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>冰 天 梦 璇</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-12T08:07:11.532Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Iceway</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络安全实验室题解</title>
    <link href="http://yoursite.com/2017/09/11/CTF%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2017/09/11/CTF基础/</id>
    <published>2017-09-11T00:50:18.000Z</published>
    <updated>2017-09-12T08:07:11.532Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/Z9mBN4a.jpg" alt=""><br><a id="more"></a></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>今日入了网安的坑，看了各位大佬的安利，找到网络安全实验室的网站来解题，很多题要看参考才能解得出来，磕磕碰碰几天，把前四关的大部分题解完，积分勉强过了6000。网上的很多总结博客已经过时，这里结合自己的答题过程进行一下总结。</p>
<p>更新1： 将解密关加上，积分过了8000大关。</p>
<h1 id="答题过程"><a href="#答题过程" class="headerlink" title="答题过程"></a>答题过程</h1><h2 id="基础关"><a href="#基础关" class="headerlink" title="基础关"></a>基础关</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>第一题：<br>右击看网页源代码，在注释里。</p>
<p>第二题：<br>这段代码是rot-13编码，找一个解密网站或者自己写解密代码即可。<br>这里注意，代码中有数字，博主一开始以为是rot-18编码，答案一直错误，后面忽略数字用rot-13解密才得到正确答案。</p>
<p>第三题：<br>这里需要Python脚本进行一个循环解密，解到最后得到key，脚本代码如下：<br><img src="https://i.imgur.com/uP444c6.png" alt=""></p>
<p>第四题：<br>MD5解密即可。</p>
<p>第五题：<br><img src="https://i.imgur.com/NvAEypW.png" alt=""><br>正常访问下Accept-Language为中文，将zh-CN,zh修改为en-us,en即可。</p>
<p>第六题：<br><img src="https://i.imgur.com/DEHNQAg.png" alt=""><br>将User-Agent修改为HAHA即可。该题写过爬虫的同学应该比较清楚。</p>
<p>第七题：<br>该题将key藏在了返回头中，抓包即可。<br><img src="https://i.imgur.com/1hRxsxF.png" alt=""></p>
<p>第八题：<br>该题使用了302跳转，博主使用了git自带的Linux工具curl得到了key。<br><img src="https://i.imgur.com/RJ17f7R.png" alt=""></p>
<p>第九题：<br><img src="https://i.imgur.com/S9d3Gqt.png" alt=""><br>可以看到，返回头中Set-Cookie中只有Login=0这一项，所以需要构造cookie，使Login=1即可。</p>
<p>第十题：<br><img src="https://i.imgur.com/Oe7ypoz.png" alt=""><br>该题将输入框输入长度限制为3，博主使用Chrome浏览器，直接在F12开发者工具中修改限制长度即可。</p>
<p>第十一题：<br>该题网站出现了Bug，PHP代码暴露，不用做即可找到key。但该题思路就是将Referer地址修改为127.0.0.1即可。</p>
<p>第十二题：<br>该题涉及robots.txt。将地址后面index.php修改为robots.txt即可打开。<br><img src="https://i.imgur.com/Ul8Gl76.png" alt=""><br>找到Disallow的地址，找下去即可找到key。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总的来说，基础关基本没有涉及真正的攻防，是一些web和HTTP请求的一些基础知识的反映和体现，比较简单。</p>
<h2 id="脚本关"><a href="#脚本关" class="headerlink" title="脚本关"></a>脚本关</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>第一题：<br>这里使用了js跳转，不要用web的js，用工具发送HTTP请求即可。</p>
<p>第二题：<br>这是第一个有点费劲的题。思路是自己写脚本，用正则将计算式算出来，Python提供了eval()函数来进行计算，得到结果后发送请求即可，代码如下：<br><img src="https://i.imgur.com/SVxRmLz.png" alt=""><br>坑主要是正则表达式的构造，熟悉的就会比较简单。</p>
<p>第三题：<br>题意看不懂，直接输null即可。</p>
<p>第四题：<br><img src="https://i.imgur.com/aw6bDMM.png" alt=""><br>从源代码来看，js将alert、write、prompt全部捕捉了，但本体key藏在前端中，所以可以把源代码复制到一个HTML文件中，将三个捕捉function删掉，就能弹出key了。<br>注意：别傻乎乎地解a…<br>注注意：得到的key要从chars后开始计算14位……（欲哭无泪）</p>
<p>第五、六、七、九、十、十一题：<br>这六个题这里放在一起讲，思路是一样的，就是暴力破解。（实际上是因为前几个代码没保存…）<br>需要写个Python脚本向服务器不停发请求，大致思路为下：<br><img src="https://i.imgur.com/hnjCt0v.png" alt=""><br>五是提交一次后，只要不刷新登录界面，验证码保持原样，一直有效。所以data中加入vcode参数为提交的那个验证码即可。<br>六是提交一次后，只要不刷新登录界面，验证码失效为空。所以data中vcode为’’即可。<br>七Tips中出现session，但用六的方法也可解。<br>九之后变成了手机验证码，思路类似。<br>九很奇怪，用6666手机号接收到验证码后，用6667+验证码即可获得key，不太明白原因。<br>十就是正常暴力破解。<br>十一加上了图片验证码验证，用到了pytesseract框架，需要安装Tesseract-OCR，具体见网上教程。</p>
<p>下面进入了XSS部分，不能用Chrome浏览器，博主用的Edge。<br>第十二题：<br>最简单的XSS，注入script脚本即可。<br><img src="https://i.imgur.com/qfYwHn5.png" alt=""><br>该题没有做任何XSS防御，最简单的script注入即可。</p>
<p>第十三题：<br><img src="https://i.imgur.com/OTwTbJG.png" alt=""><br>需要一步绕过，用button绕过。<br>用<code>&lt;img src=&quot;11&quot; onerror=alert(HackingLab)/&gt;</code> 图片绕也可。</p>
<p>第十四、十五题：<br>这两个题博主本身还没有找到绕过方法，只是利用题目本身漏洞拿到的key。<br>可以在控制台输入jQuery代码获得key：<br><code>$.post(&quot;./getkey.php?ok=1&quot;,{&#39;url&#39;:location.href,&#39;ok&#39;:ok},function(data){  
            console.log(data);  
        });  
showkey();</code></p>
<p>希望有构造成功的大佬联系我。  </p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>脚本关第八题微笑题博主还没有解出，解出后会更新。<br>脚本关已经用到了编程和一些攻防思路，题目难度提高不少。</p>
<h2 id="注入关"><a href="#注入关" class="headerlink" title="注入关"></a>注入关</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>第一题：<br>该题就是万能密码的体现：<br><img src="https://i.imgur.com/PB7yvl8.png" alt=""><br>密码随便乱输的。<br>熟悉SQL的同学应该比较理解，简单来说，#表示注释号，注释掉后面的SQL语句，’结束用户名字段，查询语句就变成只根据用户名查询从而通过。</p>
<p>第二题：<br>该题为SQL注入最基础形式：<br><img src="https://i.imgur.com/4ybow9c.png" alt=""><br>报的错表示这里有注入漏洞，注入格式为id=1 or 1=1即可注入成功。</p>
<p>第三题：<br>构造格式为：id=1%a0%27 or 1=1 limit 2,1%23。<br><img src="https://i.imgur.com/XczfmOf.png" alt=""><br>典型宽字节注入，需要同学了解URL编码和SQL的limit用法。</p>
<p>第四题：<br>这是博主止步的题，由于这个题根据实验知语句中有order by，无法使用union注入，网上使用了procedure，这里将注入结构给出，procedure博主也不太会，给大家参考，同时希望有大佬给博主解释一波。<br>start=0&amp;num=1  &nbsp;&nbsp;报错注入<br>start=7&amp;num=1 procedure analyse(extractvalue(1,concat(0x3a,database())),1)  &nbsp;&nbsp;爆库<br>start=7&amp;num=1 procedure analyse(extractvalue(1,concat(0x3a,(select table_name from information_schema.tables where table_schema=0x6d79646273 limit 0,1 ))),1)&nbsp;&nbsp;爆表<br>start=7&amp;num=1 procedure analyse(extractvalue(1,concat(0x3a,(select concat(username,0x3a,password) from user limit 2,1 ))),1)&nbsp;&nbsp;爆数据</p>
<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>后面的题博主还没有做，但以博主的SQL造诣感觉有点困难，有可能要去拥抱sqlmap了……<br>SQL注入一直是web安全中绕不过的重要部分，原理和基础方法还是希望读者能理解掌握。</p>
<h2 id="上传关"><a href="#上传关" class="headerlink" title="上传关"></a>上传关</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>第一题：<br>该题图片验证在js部分，但暴露了访问地址。直接输入/upload_file.php就得到了key，get请求获得，上传jpg是post请求，现在我只能做此解释，希望懂得大佬联系我。<br><img src="https://i.imgur.com/R825Puo.png" alt=""></p>
<p>第二题：<br>该题图片验证放到了服务器上，发送请求后抓包，将请求中的.jpg换为.php即可获得key。<br><img src="https://i.imgur.com/HBeaPaK.png" alt=""></p>
<p>第三题：<br>该题是通过切割来验证jpg文件，所以文件名构造成XXX.jpg.php即可。</p>
<h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>上传绕过是博主从未接触过的部分，原理没弄太懂，大概就是文件绕过（话说注入第五关好像还用到了静态图片文件注入……），后面会做深入了解。</p>
<h2 id="解密关"><a href="#解密关" class="headerlink" title="解密关"></a>解密关</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><p>第一题：<br>这道题让我想到了脚本关手机号的一题，但是这里不能直接代替输入了。<br>用admin1代替重置，然后解md5发现，本题重置密码生成的密码为时间戳的md5加密，所以写Python脚本进行碰撞即可。<br><img src="https://i.imgur.com/4sDd1zR.png" alt=""><br>时间会很久……</p>
<p>第二题：<br>这道题需要用到EWSA工具来做穷举。2014年上大三（博主做的时候刚好大三，20岁），所以我锁定时间为1994，需要破解出月份和日期。用Python脚本生成字典：<br><img src="https://i.imgur.com/wqjr4K7.png" alt=""><br>然后用EWSA破解即可（博主的EWSA一跑就停止工作，不用显卡驱动也这样，心疼……）。</p>
<p>第三题：<br>这道题是一个Cisco库破解，用python的Cisco库写脚本即可。<br><img src="https://i.imgur.com/q6Gst5j.png" alt=""><br>或者选择在线破解看<a href="http://www.ifm.net.nz/cookbooks/passwordcracker.html" target="_blank" rel="external">这里</a>。</p>
<p>第四题：<br>博主对这个题表示无语……<br><img src="https://i.imgur.com/dmf7tu9.png" alt=""><br>大致思路就是某种算法然后解密，具体原理一脸懵逼，而且丝毫没有兴趣去搞……</p>
<p>第五题：<br>这个题是一个十六进制解密题。<br><img src="https://i.imgur.com/fV7BLpb.png" alt=""><br>后面是重复无用的代码，重点在第一行和第六行。<br>第一行为这张卡uid的位置，也是出错代码的位置，第一行全部改0后输出金额为100。<br>第六行2710的十进制为10000，说明这个题的金额表示为100.00。<br>efd8代表取反，37代表两字节之和校验，即两个位置数字都得是1027或其他。<br>这里要修改为200，200的十六进制为4e20，所以讲两个1027改为204e即可。</p>
<p>第六题：<br>该题是base64破解题，当然没有那么简单。密文全部为大写字母，所以要将所有情况进行穷举破解。<br><img src="https://i.imgur.com/LSzoNRS.png" alt=""><br>这里使用了递归算法，将结果罗列，挨个试验即可（其实挺明显的……）。</p>
<p>第七题：<br>这个题用到了PHP代码的‘==’特性，在PHP中如果两个变量的md5密文是0e[0-9].*格式，无论原变量值是否相同，PHP认为其相等。<br><img src="https://i.imgur.com/jYsBHZT.png" alt=""><br>这里代码的意思就是：  </p>
<ol>
<li>password不能与rootadmin相等。  </li>
<li>md5(password)与md5(rootadmin)相等。<br>而rootadmin加密的MD5码为0e332932043729729062996282883873，符合结构，所以只要发送post请求，参数password的MD5为上述结构即可。常见的为s878926199a、240610708、QNKCDZO等。<br>注意：这里发送post需要在请求头上加上Content-Type:application/x-www-form-urlencoded。</li>
</ol>
<p>第八题：<br>令人啼笑皆非的一道题。<br>拿到文件后用txt打开，会发现软件名称。<br><img src="https://i.imgur.com/le43Fcu.png" alt=""><br>然后把软件下载下来（70多个M）安装完成后，导入文件即可看到key。<br><img src="https://i.imgur.com/HB70zEy.png" alt=""></p>
<h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><p>解密关是博主几关做来最困难的一关，除少数外几乎都需要参考才会有思路，而且参考大多使用python2，而博主使用的是python3，踩了好多的坑。</p>
<h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>综合关博主还没有做，后面会后续更新。<br>网络空间实验室的题可以说是新手小白入门CTF和网络安全比较好的选择，只不过多年没有更新题库，教程区也404了。类似的网站还有很多，希望各位大佬进行技术交流。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Z9mBN4a.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Tornado搭建RESTful API心得</title>
    <link href="http://yoursite.com/2017/09/07/Tornado%E6%90%AD%E5%BB%BARESTful-API%E5%BF%83%E5%BE%97/"/>
    <id>http://yoursite.com/2017/09/07/Tornado搭建RESTful-API心得/</id>
    <published>2017-09-07T00:45:29.000Z</published>
    <updated>2017-09-07T01:56:08.770Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/DQoPBLn.jpg" alt=""><br><a id="more"></a></p>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>原本是为了九月份实训能休息，所以在七月份加入了这个项目来抵实训项目（结果现在还是在实训…）。本来在七月底实训结束时就该写这篇博文，但我电脑当时登不上GitHub了，博客仓库随之关闭，只能拖到了现在。</p>
<p>虽然现在想想有些亏，但这个项目终归是我第一次在一个完整团队中进行项目开发，还是有很多心得的，本文进行了一个整理分享。</p>
<p>由于本项目涉及商业信息，源码无法公开，只能大致分享架构，不便之处请见谅。</p>
<h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p>本项目是一个线上购买课程的移动APP  </p>
<p>web前端：AngularJS，完成管理员界面和分享部分web界面<br>移动端：Andorid和iOS，中规中矩，Java与swift，完成项目客户端<br>后端：Python的tornado框架搭建的RESTful API，实现项目服务端<br>数据库：MongoDB<br>服务器：Linux上的Nginx</p>
<h1 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h1><p>这里先解释一下RESTful API，具体定义解释请看<a href="https://baike.baidu.com/item/RESTful/4406165?fr=aladdin" target="_blank" rel="external">这里</a>。<br>RESTful的优势、和传统接口对比我这里不谈，网上大佬都有解释。这里我针对刚开始做项目的小白解释一点，为什么后端要使用API与前端对接。<br>很多人开始写项目只用一种语言，比如java、C++；再提升一点，在一端写代码，比如web前端+PHP。但当出现多端需要同时一个服务器时，传统那些内嵌的写法就不可取，因为前端和移动端使用的是不同逻辑结构，比如手机QQ和传统PC端QQ。<br>而API解决了这个问题，前后端分离，用HTTP来交互，前端不需要考虑数据库结构，后端不需要考虑UI界面。而RESTful只是时间演变后更流行、更合适的API结构。</p>
<h1 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h1><p>这里对tornado框架进行说明。tornado是Python web中比较经典的异步加载的框架。tornado参考文档看<a href="http://www.tornadoweb.org/en/stable/" target="_blank" rel="external">这里</a>。<br>当接到这个项目说要使用tornado时，当时对该框架的概念为0。而且该框架比较难的一点是生态圈不好，网上很难找到比较细节的错误提示和技术分享，报错基本上都要自己解决。<br>但这个框架的优势是显而易见的，异步加载比同步的优势我这里就不赘述了。项目中我们使用了Python3.5的await和async关键字来完成数据库加载代码以提高代码效率。await和async使用看<a href="http://python.jobbole.com/86069/" target="_blank" rel="external">这里</a>。</p>
<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><p>数据库我们选择了NoSQL中最为经典的MongoDB。MongoDB具体解释看<a href="https://baike.baidu.com/item/mongodb/60411?fr=aladdin" target="_blank" rel="external">这里</a>。<br>由于后端不需要考虑前台UI界面，所以后端逻辑大多与数据库打交道，要将前端所需的数据进行整理。本次项目对我来讲最困难的部分就是表结构的设计。<br>由于之前接触的大多是SQL，对MongoDB这种文档式的数据库是第一次接触，中间与产品、前端、移动端多次交流调整，表结构推翻了几次才敲定。<br>与MongoDB进行交互的是与tornado配套的motor框架，是基于经典的pymongo框架完成的，motor参考文档看<a href="http://motor.readthedocs.io/en/stable/" target="_blank" rel="external">这里</a>。</p>
<h1 id="后端大致框架"><a href="#后端大致框架" class="headerlink" title="后端大致框架"></a>后端大致框架</h1><p><img src="https://i.imgur.com/HtccgaY.png" alt=""></p>
<p>由于源码无法公开，这里只对该后台项目的大体架构进行解析。</p>
<h2 id="doc"><a href="#doc" class="headerlink" title="doc"></a>doc</h2><p>这里存放的是makedoc.sh脚本自动生成的接口文档的文件。<br>项目开发中，后端需要给其他端提供API接口，而这些会写在接口文档中，文档标明某接口的地址、所需参数、返回数据格式等，其他端通过文档来构造HTTP请求，完成交互。</p>
<h2 id="handler"><a href="#handler" class="headerlink" title="handler"></a>handler</h2><p><img src="https://i.imgur.com/6w6ofSK.png" alt=""><br>这里存放的是主要业务结构的Python代码，不接触数据库，调用ORM层提供的函数。</p>
<h2 id="locales"><a href="#locales" class="headerlink" title="locales"></a>locales</h2><p><img src="https://i.imgur.com/1AjHtrV.png" alt=""><br>这里存放的是一些js文件，每一个js存放了对应的语言，如zh_cn等等。</p>
<h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p><img src="https://i.imgur.com/gGJXZBI.png" alt=""><br><img src="https://i.imgur.com/8tFuNaF.png" alt=""><br>这里是封装好的ORM层，实现业务与数据库的解耦。不考虑业务，只提供各handler所需要的函数。与MongoDB的连接配置在Control和MongoDB_ORM中。</p>
<h2 id="unit"><a href="#unit" class="headerlink" title="unit"></a>unit</h2><p>只有一个tool.py，放了一些通用的工具函数，如json_decode，getTimeStamp等。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本次项目是我第一次在完整团队中进行核心开发，第一次体会了公司中的开发模式，感慨很多：</p>
<ol>
<li>永远不要高估个人的力量，集体的智慧会让你事半功倍。</li>
<li>产品和开发永远是敌人，尤其是后端…</li>
<li>实际问题永远比你想象的要多，但永远比你想象的要简单。</li>
</ol>
<p>本文针对自己在项目中的所思所想和总结进行一次技术和心得分享，欢迎大佬们交流。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/DQoPBLn.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="项目" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Github.io + Hexo建站</title>
    <link href="http://yoursite.com/2017/06/28/hexo%E5%BB%BA%E7%AB%99/"/>
    <id>http://yoursite.com/2017/06/28/hexo建站/</id>
    <published>2017-06-28T02:58:50.000Z</published>
    <updated>2017-09-11T03:10:26.432Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/ZQVEpo1.png" alt=""><br><a id="more"></a></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>上半年就想要开坑做一个个人博客用于技术生活交流，本来是想用Django的一个老坑来重建，但考虑到自己那捉鸡的前端水平，果断放弃并一把抱住框架的大腿。几经筛选选择了github + hexo这个框架，用了大概一天的时间大体完成（大部分时间在写校史的微博…），简单分享一下完成过程。</p>
<h1 id="完成过程"><a href="#完成过程" class="headerlink" title="完成过程"></a>完成过程</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Github方面用到的就是Github.io作为博客文件的仓库。搭建过程为：</p>
<p>1.安装git<br>2.申请github账号<br>3.新建github.io仓库</p>
<p>具体参见度娘，很多大神有详细攻略，这里就不赘述了。</p>
<p>Hexo框架基于Node.js，安装hexo框架过程：<br>1.安装Node.js<br>2.安装npm<br>3.安装hexo：npm install -g hexo-cli<br>4.最后初始化博客 hexo init blog（注意最后一个命令要在博客目录下完成）</p>
<h2 id="Hexo常见命令"><a href="#Hexo常见命令" class="headerlink" title="Hexo常见命令"></a>Hexo常见命令</h2><p>hexo init blog   //初始化博客<br>hexo n(ew) “新博客的名字”   //新建博客<br>hexo g(enerate)   //生成代码<br>hexo s(erver)   //开启本地服务器，用于测试，地址localhost:4000<br>hexo d(eploy)   //部署到github.io仓库中，博客上线<br>hexo clean   //清空缓存</p>
<p>上线过程：<br>hexo n “new blog”<br>hexo clean<br>hexo g<br>hexo d</p>
<h2 id="安装git部署插件"><a href="#安装git部署插件" class="headerlink" title="安装git部署插件"></a>安装git部署插件</h2><p>hexo部分功能需要插件完成，后面的next主题中还会出现，这里是部署git时需要的插件（插件的下载要在blog文件夹的位置开启命令行进行）<br>npm install hexo-deployer-git –save</p>
<h2 id="推送网站"><a href="#推送网站" class="headerlink" title="推送网站"></a>推送网站</h2><p>推送网站时需要在_config.yml文件中配置推送地址及类型</p>
<p>然后就可以通过上文上线命令将博客推送至gitHub.io仓库上，所有人都可以在网上看到你的博客了。</p>
<h2 id="NexT主题搭建"><a href="#NexT主题搭建" class="headerlink" title="NexT主题搭建"></a>NexT主题搭建</h2><p>博客搭建比较容易，比较费时的在于主题的选择和配置上。<br>我这里选择比较主流的next主题。</p>
<p>在站点_config.yml配置文件中修改主题为next</p>
<p><img src="https://i.imgur.com/p7g9ekz.png" alt=""></p>
<p>打开主题_config.yml配置文件中修改主题样式，我选择的是Mist，动态效果会好一些，读者可以自己比对选择</p>
<p><img src="https://i.imgur.com/Cq5qygy.png" alt=""></p>
<p>剩下的高级个性化设计，如侧边栏的设计、背景图片、音乐插件等等读者可以去百度搜索，有不少博主有详细的分享，我这里就不赘述。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>hexo还有许多支持我还没有去尝试，这个坑会不断的填，遇到项目或者有价值的代码过程我都会在博客中分享，欢迎交流。</p>
<p>参考材料地址：<a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/26625249</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ZQVEpo1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="项目" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>独立开发校史竞赛平台总结</title>
    <link href="http://yoursite.com/2017/06/27/%E6%A0%A1%E5%8F%B2/"/>
    <id>http://yoursite.com/2017/06/27/校史/</id>
    <published>2017-06-27T02:25:22.000Z</published>
    <updated>2017-09-07T00:32:19.897Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/G4u5zKa.jpg" alt=""><br><a id="more"></a></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>该项目用于2016级东南大学新生校史知识竞赛初赛答题所开发的web平台，具体代码见<a href="https://github.com/IcewayC/PHP_seuhistory" target="_blank" rel="external">这里</a></p>
<h1 id="具体细节要求"><a href="#具体细节要求" class="headerlink" title="具体细节要求"></a>具体细节要求</h1><ol>
<li>首先就是坑爹的IE6支持，可能这是最后一次要求对IE6的支持（据说就这一条导致很多大佬放弃了这个项目）。</li>
<li>要求同一间机房的题目尽量保持不同。</li>
<li>考虑学校性能（没有变态到要用负载均衡，但以及上万名考生的负载，要尽可能降低服务器压力）。</li>
</ol>
<h1 id="项目实现过程"><a href="#项目实现过程" class="headerlink" title="项目实现过程"></a>项目实现过程</h1><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>当时处于小白状态，所以选择了对新手较为友好的PHP作为项目后台语言，选择Windows平台作为开发平台，XAMPP来部署PHP开发环境。</p>
<p>这可以说是对新手最友好的一套方案，零基础也是可以上手的。当然有基础的还是可以选择Java、.NET、Python、nodejs等等，这里就不一一赘述。</p>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h3><p>这是做web系统最基础，也是最常用的功能，先上图</p>
<p><img src="https://i.imgur.com/8Bb7xPz.jpg" alt=""></p>
<ol>
<li>使用了验证码用于防爬虫和恶意登陆，验证码制作方法见这里。</li>
<li>提供了管理员界面和注册界面的跳转。</li>
<li>学号和密码使用正则匹配来判定输入正确性（密码为一卡通号）。这里有一个坑，第一次搭项目的时候，正则匹配被放在后端进行，性能优化时选择放入js代码来降低服务器压力。</li>
<li>跳转逻辑为有分数则跳转到查分界面，没有则进入答题界面。 跳转使用ajax来完成。</li>
</ol>
<h3 id="注册界面"><a href="#注册界面" class="headerlink" title="注册界面"></a>注册界面</h3><p><img src="https://i.imgur.com/yoJ1Yrm.jpg" alt=""></p>
<ol>
<li>可有可无，避免学校给的信息有缺漏。</li>
<li>数据库添加（这里尤其防sql注入）操作，不赘述。</li>
</ol>
<h3 id="答题界面"><a href="#答题界面" class="headerlink" title="答题界面"></a>答题界面</h3><p>本次项目的重点，也是核心算法体现的位置</p>
<p><img src="https://i.imgur.com/nqkpCdz.png" alt=""></p>
<ol>
<li>显而易见的部分我就不赘述，将前端登录信息传进来后都可以做。</li>
<li>倒计时效果实现见这里。（关键在于setTimeout函数），时间结束自动交卷。</li>
<li>限定必须所有题目答案完成才能交卷，从而限制恶意刷卷的可能。</li>
<li>交卷先写入数据库，后跳转至查分页面。</li>
</ol>
<p><strong> 题目获取逻辑（核心）</strong></p>
<pre><code>* 本次项目最难，也最体现自主思考的就是题目获取算法，主要在于尽可能地降低服务器压力（不考虑负载均衡和分布式等复杂架构）。 *
* 这里我采用的方法是提前构建题库的方法。在项目部署完成后运行获取题目脚本createQuestionPaper.php，构建500套随机生成的题目放在表中，那么在运行过程中只需要获取题目，不需要使用随机算法来构建题目。从而降低服务器压力。 *
* 这里还有一个坑就是表中题目储存直接用text格式存放json格式的题干和答案，便于前端获取后进行解析（具体结构在最后的表结构处）。 *
</code></pre><h3 id="查分界面"><a href="#查分界面" class="headerlink" title="查分界面"></a>查分界面</h3><p><img src="https://i.imgur.com/zIK8ElI.png" alt=""></p>
<ol>
<li>限定30秒注销，倒计时同答题界面。</li>
<li>注销跳转回登录界面</li>
</ol>
<h3 id="管理员界面"><a href="#管理员界面" class="headerlink" title="管理员界面"></a>管理员界面</h3><p><img src="https://i.imgur.com/JLDQ78O.jpg" alt=""></p>
<p><img src="https://i.imgur.com/zahytUC.png" alt=""></p>
<p><img src="https://i.imgur.com/arhA4J3.png" alt=""></p>
<ol>
<li>为每个系的辅导员分配账号，设定为学号前五位+000（如9系为09016000）。</li>
<li>辅导员界面提供对应系学生全部答题情况并提供下载Excel文件和对学生错误信息的修改界面。Excel文件操作见这里。主要是PHPExcel扩展的使用。</li>
<li>后台修改就是对数据库信息的修改，不赘述。</li>
</ol>
<h1 id="问题和改进意见"><a href="#问题和改进意见" class="headerlink" title="问题和改进意见"></a>问题和改进意见</h1><p>这个项目是当初萌新状态，边学边做的项目，十分初级，有许多可改进和升级的地方，但由于本人后面转到Java和Python上，加上学校坑爹的没有批学分，也就没有进一步优化，只是放到了github上供参考和交流。总结一下几个问题所在：</p>
<ol>
<li>最初入坑的时候使用了session和cookie，但是当初根本不理解为什么用，逻辑写的十分混乱，最后一遍干脆直接推倒全部删掉了session和cookie部分，但本身该项目是完全可以用session来完成各页面见信息交互的。</li>
<li>项目提供了redis缓存技术的代码，但当初配置上出了问题，可能会存在bug。该项目是可以使用redis来存放题库，从而进一步降低服务器压力。</li>
<li>当时处于边学边做的阶段，没有接触框架。该项目可以使用框架（ThinkPHP、Yii、Laravel）来封装实现（从项目目录来看，本项目可以说很混乱，用函数封装一下会好很多）。</li>
<li>附sql逻辑：<br><img src="https://i.imgur.com/2KVj1hc.png" alt=""><br><img src="https://i.imgur.com/qqL5WOR.png" alt=""><br><img src="https://i.imgur.com/askrD6Z.png" alt=""><br><img src="https://i.imgur.com/Pj5rMKF.png" alt=""><br><img src="https://i.imgur.com/9aPL9dh.png" alt=""></li>
</ol>
<h1 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h1><p>最后对莫少煌同学为该项目提供UI设计的支持表示感谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/G4u5zKa.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="项目" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
</feed>
